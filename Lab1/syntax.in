Syntax:
Predefined tokens are mentioned without <>

<program> ::= <stmtlist>
<stmt_list> ::= <stmt> |<stmt>; | <stmt>;<stmt_list>
<stmt> ::= <var_decl_stmt> | <assignment_stmt> | <io_stmt> | <if_stmt> | <while_stmt> | <for_stmt>

<var_decl_stmt> ::= <type> <identifier_list>
<identifier_list> ::= <identifier> | <identifier>,<identifier_list>
<type> ::= <simple_type> | <array>
<simple_type> ::= integer | string
<array> ::= <simple_type>[<const_integer>] 

<assignment_stmt> ::= <identifier> = <expression_type>
<expression_type> ::= <integer_expression> | <string_expression>
<integer_expression> ::= <integer_expression> + <term> | <integer_expression> - <term> | <term>
<term> ::= <term> * <factor> | <term> / <factor> | <term> % factor> | <factor>
<factor> ::= (<integer_expression>) | <identifier> | <const_integer>
<string_expression> ::= <string_expression> + <string_factor> | <string_factor>
<string_factor> ::= (<string_expression>) | <identifier> | <const_string>

<io_stmt> ::= read(<identifier>) | print(<identifier>) | print(expression_type)

<if_stmt> ::= verify(<condition_list>) { <stmt_list> } | verify(<condition_list>) { <stmt_list> } otherwise {<stmt_list>}

<while_stmt> ::= loopWhile(<condition_list>) {<stmt_list>}

<for_stmt> ::= loopFor(<assignment_stmt> ; <condition>; <assignment_stmt>) { <stmt_list> }

<condition_list> ::= <condition> | <condition> <logical_op> <condition_list>
<condition> ::= <expression> <relation> <expression>
<relation> ::= < | > | <= | >= | == | != 
<logical_op> ::= AND | OR